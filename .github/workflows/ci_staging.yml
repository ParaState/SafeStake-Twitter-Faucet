# This workflow will build and push a new container image to Amazon EKS,
# and then will upgrade a helm charts to Amazon EKS, on every push
# to the tag
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.
name: Deploy to Amazon EKS staging
on:
  push:
    branches:
      - master
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - uses: azure/setup-kubectl@v2.0
      with:
        version: 'v1.21.12' 
      id: kubectl-install

    - name: Use kubectl
      env: 
        KUBECTL_BIN: ${{ steps.kubectl-install.outputs.kubectl-path }}
      run: |
        mv $KUBECTL_BIN /usr/local/bin/kubectl

    - name: Checkout
      uses: actions/checkout@v1
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: safestake-twitter-faucet
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        pwd
        ls -la
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Generate kubeconfig
      run: |
        aws eks --region ap-southeast-1 update-kubeconfig --name ss-testnet

    - uses: azure/setup-helm@v3
      id: helm-install
    
    - name: Helm upgrade chart
      env: 
        HELM_BIN: ${{ steps.helm-install.outputs.helm-path }}
        IMAGE_TAG: ${{ github.sha }}
        FAUCET_PRIVATE_KEY: ${{ secrets.FAUCET_PRIVATE_KEY }}
        FAUCET_PUBLIC_KEY: ${{ secrets.FAUCET_PUBLIC_KEY }}
        BLOCKCHAIN_RPC: ${{ secrets.BLOCKCHAIN_RPC }}
        TWITTER_ID: ${{ secrets.TWITTER_ID }}
        ERC20_ADDRESS: ${{ secrets.ERC20_ADDRESS }}
        DATABASE_URI: ${{ secrets.DATABASE_URI }}
        DB_ROOT_HOST: ${{ secrets.DB_ROOT_HOST }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASS: ${{ secrets.DB_PASS }}
      run: |
        echo "Helm upgrade safestake-discord-faucet $IMAGE_TAG"
        $HELM_BIN upgrade --install -f $GITHUB_WORKSPACE/cicd/twitter-faucet/values.yaml twitter $GITHUB_WORKSPACE/cicd/twitter-faucet --set=image.tag=$IMAGE_TAG --namespace=staging --set=env.faucet_private_key=$FAUCET_PRIVATE_KEY  --set=env.faucet_public_key=$FAUCET_PUBLIC_KEY --set=env.blockchain_rpc=$BLOCKCHAIN_RPC --set=env.twitter_id=$TWITTER_ID --set=env.erc20_address=$ERC20_ADDRESS --set=env.database_uri=$DATABASE_URI --set=env.DB_ROOT_HOST=$DB_ROOT_HOST --set=env.DB_NAME=$DB_NAME --set=env.DB_USER=$DB_USER --set=env.DB_PASS=$DB_PASS --set=ingress.enabled=true,ingress.hosts[0].host="testnet-faucet.safestake.xyz"
